#+TITLE: orgmode examples
#+SUBTITLE: draw, code evaluation and present in orgmode with \LaTeX{} beamer
#+AUTHOR: kimim
#+STARTUP: content
#+OPTIONS: H:2 toc:t num:t date:t author:t
#+BEAMER_THEME: kimim

* Introduction
** Purpose
To evaluate many features of orgmode, such as
- drawing with code
- evaluating results of code snippets
- exporting orgmode file to pdf slides
** How
Following tools are used in this file:
- [[https://www.msys2.org/][MSYS2]] provides many tools and libraries
- [[https://www.graalvm.org/][GraalVM]] JDK supports Java, JS, R and more
- [[https://www.gnu.org/software/emacs/][GNU Emacs]] with [[https://github.com/kimim/kimim-emacs][kimim-emacs]] configuration
- [[https://orgmode.org/][Org Mode]], including org-babel, org-export
- [[http://tug.org/texlive/][TexLive]] with [[https://github.com/kimim/beamertheme-kimim][beamertheme-kimim]] style
- [[https://plantuml.com/][PlantUML]], [[https://graphviz.org][Graphviz]], \LaTeX{} [[https://www.ctan.org/pkg/pgf][tikz]] package
- [[https://inkscape.org/][Inkscape]] to convert svg to pdf, during orgmode-pdf exporting

* Preparation
** Emacs settings
You may need to use kimim-emacs configuration:

#+begin_src shell :exports code :eval no-export
# backup existing emacs config
cd ~ && mv .emacs .emacs-backup && mv .emacs.d .emacs.d-backup
# clone this config
git clone https://github.com/kimim/kimim-emacs
# copy default .emacs to ~
cp kimim-emacs/.emacs ~
#+end_src

** Emacs and Orgmode version
Firstly, let's check GNU Emacs[fn:1] and Orgmode[fn:2] version:

#+begin_src emacs-lisp :exports both :eval no-export
(concat  (emacs-version)
         "\nOrgmode " (org-version))
#+end_src

#+RESULTS:
: GNU Emacs 28.0.50 (build 6, x86_64-w64-mingw32)
:  of 2021-08-31
: Orgmode 9.4.4


** TexLive and Beamer Theme
Install TexLive[fn:4] to ~<texlive-path>~ and clone beamertheme-kimim[fn:5], and
update \TeX{} cache:

#+begin_src shell :exports code :eval no-export
git clone https://github.com/kimim/beamertheme-kimim \
    <texlive-path>/texmf-local/tex/latex/beamertheme-kimim
mktexlsr
#+end_src

** Inkscape version
Install Inkscape[fn:6] to convert SVG image to PDF.

This is inkscape version on my Windows 10:

#+begin_src shell :exports both :results pp :eval no-export
inkscape --version
#+end_src

#+RESULTS:
: Inkscape 1.0.2-2 (e86c870879, 2021-01-15)

* Drawing in code
** PlantUML settings in Emacs
Download plantuml.jar[fn:3], and set jar-path
#+begin_src emacs-lisp :exports code :eval no-export
(require 'url-handlers)
(require 'ob-plantuml)
(url-copy-file "https://nchc.dl.sourceforge.net/project/plantuml/plantuml.jar"
               "./plantuml.jar" t)
(setq org-plantuml-jar-path "./plantuml.jar")
#+end_src

** PlantUML version
Here is the version info on my machine, including JVM, dot and graphviz:

#+begin_src emacs-lisp :exports outputs :eval no-export
(shell-command-to-string
 (concat
  "java -jar " org-plantuml-jar-path " -version"))
#+end_src

#+RESULTS:
#+begin_example
PlantUML version 1.2021.8 (Sat Jun 26 16:20:59 CST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US

PLANTUML_LIMIT_SIZE: 4096

Dot version: dot - graphviz version 2.44.1 (20200629.0846)
Installation seems OK. File generation OK
#+end_example

** Sequence Diagram
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
Let's draw a simple sequence diagram with this plantuml code:

#+name: sequence-diagram
#+begin_src plantuml :exports code :results output silent
@startuml
hide footbox
hide unlinked
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Response
@enduml
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src plantuml :noweb yes :file alice-and-bob.svg :output-dir images :eval no-export
<<sequence-diagram>>
#+end_src

#+RESULTS:
[[file:images/alice-and-bob.svg]]

** Class Diagram
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
A simple class diagram

#+name: class-diagram
#+begin_src plantuml :exports code :results output silent
@startuml
class Car
Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns
@enduml
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src plantuml :noweb yes :file class-diagram.svg :output-dir images :eval no-export
<<class-diagram>>
#+end_src

#+RESULTS:
[[file:images/class-diagram.svg]]

** tikz logo
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.7
:END:
#+name: tikz-triangle
#+begin_src latex :exports code :eval no
\begin{tikzpicture}
  \filldraw[blue] (0,0) rectangle (-4,-2);
  \filldraw[blue,rotate=-30] (0,0) rectangle (1,-0.2);
  \filldraw[blue] (-4,0) circle (0.2);
  \filldraw[blue] (-4,-2) rectangle (-3,-3);
  \filldraw[blue] (0,-2) rectangle (-1,-3);
  \filldraw[blue] (-4,0) rectangle (-5.5,-1.5);
\end{tikzpicture}
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
#+begin_src latex :noweb yes :output-dir images :file logo.svg :results file raw :exports results :eval no-export
<<tikz-triangle>>
#+end_src

#+RESULTS:
[[file:images/logo.svg]]

** tikz background
#+name: tikz-background
#+begin_src latex :exports code :eval no
\begin{tikzpicture}
  \fill[left color=blue,right color=white,shading angle=90,line width=0] (0,0) rectangle (4,-2);
  \begin{scope}[shift={(1,-1)}]
    \fill[red!30!white,semitransparent]   ( 90:0.3) circle (0.5);
    \fill[green!30!white,semitransparent] (210:0.3) circle (0.5);
    \fill[blue!30!white,semitransparent]  (330:0.3) circle (0.5);
  \end{scope}
\end{tikzpicture}
#+end_src

#+begin_src latex :noweb yes :output-dir images :file background.svg :results file raw :exports results :eval no-export
<<tikz-background>>
#+end_src

#+ATTR_LATEX: :width 0.4\paperwidth
#+RESULTS:
[[file:images/background.svg]]

** ditaa
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+name: ditaa-process
#+begin_src ditaa :exports code :eval no
    +--------+   +-------+    +-------+
    |cGRE    | --+ ditaa +--> |cFF0   |
    |  Text  |   +-------+    |diagram|
    |Document|   |!magic!|    |       |
    |     {d}|   |       |    |       |
    +---+----+   +-------+    +-------+
        :                         ^
        |       Lots of work      |
        +-------------------------+
#+end_src
*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src ditaa :noweb yes :output-dir images :file ditaa-process.svg :cmdline --svg -S -o :eval no-export
<<ditaa-process>>
#+end_src
#+RESULTS:
[[file:images/ditaa-process.svg]]

** mermaid
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
Installation and Configuration, see [[https://github.com/kimim/kimim-emacs#mermaid][kimim-emacs#mermaid]]
#+name: mermaid
#+begin_src mermaid :exports code :eval no
sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop Healthcheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+begin_src mermaid :noweb yes :file mermaid.svg :output-dir images :eval no-export
<<mermaid>>
#+end_src

#+RESULTS:
[[file:images/mermaid.svg]]

* Org-babel Evaluating Programming Languages
** emacs lisp
#+begin_src emacs-lisp :exports both :eval no-export
(emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 28.0.50 (build 6, x86_64-w64-mingw32)
:  of 2021-08-31

#+NAME: thisyear
#+begin_src emacs-lisp :exports both :eval no-export
(decoded-time-year (decode-time (current-time)))
#+end_src

#+RESULTS: thisyear
: 2021


** shell
#+begin_src shell :results verbatim :exports both :eval no-export
sh --version
#+end_src

#+RESULTS:
: GNU bash, version 5.1.8(1)-release (x86_64-pc-msys)
: Copyright (C) 2020 Free Software Foundation, Inc.
: License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
:
: This is free software; you are free to change and redistribute it.
: There is NO WARRANTY, to the extent permitted by law.

** C

#+begin_src C :exports both :var year=thisyear :eval no-export
printf("%s is %d years old\n", "C programming language", year-1972);
#+end_src

#+RESULTS:
: C programming language is 49 years old

** C++
#+begin_src C++ :exports both :namespaces std :includes <iostream> :var year=thisyear :eval no-export
cout << "C++ is " << year-1979 << " years old" << endl;
#+end_src

#+RESULTS:
: C++ is 42 years old

** Clojure

#+begin_src clojure :results output :exports both :var year=thisyear :eval no-export
(println "Clojure is" (- year 2005) "years old")
#+end_src

#+RESULTS:
: Clojure is 16 years old

** ClojureScript

TODO
# #+begin_src clojurescript :exports both :var year=thisyear :eval no-export
# (println "ClojureScript is" (- 2021 2011) "years old")
# #+end_src

** Java

TODO: can pass variable to java

#+begin_src java :classname Main :exports both :var year=thisyear :eval no-export
public class Main{
    public static void main(String[] args){
        System.out.println("Java is " + (2021-1995) + " years old");
        return;
    }
}
#+end_src

#+RESULTS:
: Java is 26 years old

** Python

Check Python version in shell:
#+begin_src shell :exports both :eval no-export
python --version
#+end_src

#+RESULTS:
: Python 3.9.6

Evaluate Python code:
#+begin_src python :results output :exports both :var year=thisyear :eval no-export
print("Python is " + str(year - 1991) + " years old")
#+end_src

#+RESULTS:
: Python is 30 years old

** Rust

#+begin_src emacs-lisp :eval no-export
(package-install 'ob-rust)
#+end_src

#+RESULTS:
: ‘ob-rust’ is already installed

TODO: cannot pass variable to rust

#+begin_src rust :exports both :var year=thisyear :eval no-export
fn main() {
    println!("Rust is {} years old", 2021 - 2016);
}
#+end_src

#+RESULTS:

** Go

TODO
#+begin_src go :exports both
package main
import ("fmt")

func main(){
   fmt.Println("emacs")
}
#+end_src

** R
TODO
* Org-babel for music and others
** LilyPond

#+name: lilypond
#+begin_src lilypond :exports code :eval no
\relative c' {
  \chordmode {c1}
  \chordmode {d1}
  \chordmode {e1}
  \chordmode {f1}
  \chordmode {g1}
  \chordmode {a1}
  \chordmode {b1}
}
#+end_src

#+begin_src lilypond :noweb yes :output-dir images :file chords.svg :cmdline --svg -dno-print-pages -dpreview :eval no-export
<<lilypond>>
#+end_src

#+RESULTS:
[[file:images/chords.svg]]

** Math Equations

* Presenting with Org-beamer
** Beamer

In this section, I will try some beamer settings in orgmode.

** latexmk version

#+begin_src emacs-lisp :exports both :eval no-export
(princ (concat (format "LaTeXmk version: %s\n"
                       (eshell-command-result "latexmk --version") "\n")
               (format "XeTeX version: %s\n"
                       (eshell-command-result "xelatex --version") "\n")))
#+end_src

#+RESULTS:
#+begin_example
LaTeXmk version: Latexmk, John Collins, 29 May 2021. Version 4.74b
XeTeX version: XeTeX 3.141592653-2.6-0.999993 (TeX Live 2021/W32TeX)
kpathsea version 6.3.3
Copyright 2021 SIL International, Jonathan Kew and Khaled Hosny.
There is NO warranty.  Redistribution of this software is
covered by the terms of both the XeTeX copyright and
the Lesser GNU General Public License.
For more information about these matters, see the file
named COPYING and the XeTeX source.
Primary author of XeTeX: Jonathan Kew.
Compiled with ICU version 68.2; using 68.2
Compiled with zlib version 1.2.11; using 1.2.11
Compiled with FreeType2 version 2.10.4; using 2.10.4
Compiled with Graphite2 version 1.3.14; using 1.3.14
Compiled with HarfBuzz version 2.7.4; using 2.7.4
Compiled with libpng version 1.6.37; using 1.6.37
Compiled with pplib version v2.05 less toxic i hope
Compiled with fontconfig version 2.13.93; using 2.13.93
#+end_example

** simple slide

This is a simple slide, with some formatted texts:
- *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
  - *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
  - *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
    - *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
    - *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
    - *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}

Enumerations:
1. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
   1. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
   2. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
      1. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
      2. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}
      3. *important* _underline_ /slashed/ =code=  ~verbatim~ +deleted+ \alert{alert}

** simple slide with definition

It is not recommended to have second level definition bullet...
- Beamer :: LaTeX package to generate slides
- Orgmode :: Powerful plain text format
  - org-babel :: Let Orgmode understand and evaluate programming languages
  - ox-latex :: Exporter to export orgmode to latex and further to PDF

** simple slide with wallpaper
#+BEAMER: \ThisCenterWallPaper{1}{beamer/wallpaper}

- This slide has a nice wallpaper.
- It is the westlake in the morning.

** full screen with a wallpaper                                 :B_fullframe:
:PROPERTIES:
:BEAMER_env: fullframe
:END:
#+BEAMER: \ThisCenterWallPaper{1}{beamer/wallpaper}

** some todo list

- daily task [33%]
  - [X] fetch the milk in the morning
  - [ ] check the mailbox
  - [ ] clean the garden
- learning task [50%]
  - [X] read the book
  - [X] write the reading notes
  - [ ] make a presentation
  - [ ] present to students

** table

#+attar_latex: :align c|l|r
| \rotatebox{45}{enrollment to the class} | \rotatebox{45}{name} | \rotatebox{45}{date} |
|-----------------------------------------+----------------------+----------------------|
| x                                       | Kimi                 |           2021-09-18 |
|                                         | Ivy                  |           2021-09-28 |
| x                                       | Anna                 |           2021-09-20 |

* Conclusion
** Key Takeaways

- Emacs is a long lasting, and wonderful text editor
- Orgmode is an awesome plain text format
- \LaTeX{} is great typesetting tool
- Beamer is a \LaTeX{} package for preparing presentation
- Thus, using these tools within Emacs is cool!

* Appendix                                                       :B_appendix:
:PROPERTIES:
:BEAMER_env: appendix
:END:
** References
:PROPERTIES:
:BEAMER_opt: allowframebreaks,label=
:END:
#+BEGIN_EXPORT latex
\iffalse % multiline comment
#+END_EXPORT
[[bibliography:references.bib]]
#+BEGIN_EXPORT latex
\fi
\printbibliography
#+END_EXPORT

* Footnotes

[fn:1] https://www.gnu.org/software/emacs

[fn:2] https://orgmode.org

[fn:3] https://plantuml.com

[fn:4] http://tug.org/texlive

[fn:5] https://github.com/kimim/beamertheme-kimim

[fn:6] https://inkscape.org
