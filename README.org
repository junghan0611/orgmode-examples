#+TITLE: orgmode examples
#+SUBTITLE: draw, code evaluation and present in orgmode with \LaTeX{} beamer
#+AUTHOR: kimim
#+STARTUP: content
#+OPTIONS: H:2 toc:t num:t date:t author:t
#+BEAMER_THEME: kimim

* Introduction
** Purpose
To evaluate many features of orgmode, such as
- drawing with code
- evaluating results of code snippets
- exporting orgmode file to pdf slides
** How
Following tools are used in this file:
- [[https://www.msys2.org/][MSYS2]] provides many tools and libraries
- [[https://www.graalvm.org/][GraalVM]] JDK supports Java, JS, R and more
- [[https://www.gnu.org/software/emacs/][GNU Emacs]] with [[https://github.com/kimim/kimim-emacs][kimim-emacs]] configuration
- [[https://orgmode.org/][Org Mode]], including org-babel, org-export
- [[http://tug.org/texlive/][TexLive]] with [[https://github.com/kimim/beamertheme-kimim][beamertheme-kimim]] style
- [[https://plantuml.com/][PlantUML]], [[https://graphviz.org][Graphviz]], \LaTeX{} [[https://www.ctan.org/pkg/pgf][tikz]] package
- [[https://inkscape.org/][Inkscape]] to convert svg to pdf, during orgmode-pdf exporting

* Preparation
** Emacs settings
You may need to use kimim-emacs configuration:

#+begin_src shell :exports code
# backup existing emacs config
cd ~ && mv .emacs .emacs-backup && mv .emacs.d .emacs.d-backup
# clone this config
git clone https://github.com/kimim/kimim-emacs
# copy default .emacs to ~
cp kimim-emacs/.emacs ~
#+end_src

** Emacs and Orgmode version
Firstly, let's check GNU Emacs[fn:1] and Orgmode[fn:2] version:

#+begin_src emacs-lisp :exports both
(concat  (emacs-version)
         "\nOrgmode " (org-version))
#+end_src

#+RESULTS:
: GNU Emacs 28.0.50 (build 6, x86_64-w64-mingw32)
:  of 2021-08-31
: Orgmode 9.4.4


** TexLive and Beamer Theme
Install TexLive[fn:4] to ~<texlive-path>~ and clone beamertheme-kimim[fn:5], and
update \TeX{} cache:

#+begin_src shell :exports code
git clone https://github.com/kimim/beamertheme-kimim \
    <texlive-path>/texmf-local/tex/latex/beamertheme-kimim
mktexlsr
#+end_src

** Inkscape version
Install Inkscape[fn:6] to convert SVG image to PDF.

This is inkscape version on my Windows 10:

#+begin_src shell :exports both :results pp
inkscape --version
#+end_src

#+RESULTS:
: Inkscape 1.0.2-2 (e86c870879, 2021-01-15)

* PlantUML
** PlantUML settings in Emacs
Download plantuml.jar[fn:3], and set jar-path:
#+begin_src emacs-lisp :exports code
(require 'url-handlers)
(require 'ob-plantuml)
(url-copy-file "https://nchc.dl.sourceforge.net/project/plantuml/plantuml.jar"
               "./plantuml.jar" t)
(setq org-plantuml-jar-path "./plantuml.jar")
#+end_src
** PlantUML version
Here is the version info on my machine, including JVM, dot and graphviz:

#+begin_src emacs-lisp :exports outputs
(shell-command-to-string
 (concat
  "java -jar " org-plantuml-jar-path " -version"))
#+end_src

#+RESULTS:
#+begin_example
PlantUML version 1.2021.8 (Sat Jun 26 16:20:59 CST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US

PLANTUML_LIMIT_SIZE: 4096

Dot version: dot - graphviz version 2.44.1 (20200629.0846)
Installation seems OK. File generation OK
#+end_example

** Sequence Diagram
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
Let's draw a simple sequence diagram with this plantuml code:

#+name: sequence-diagram
#+begin_src plantuml :exports code :results output silent
@startuml
hide footbox
hide unlinked
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Response
@enduml
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src plantuml :noweb yes :file alice-and-bob.svg :output-dir images
<<sequence-diagram>>
#+end_src

#+RESULTS:
[[file:images/alice-and-bob.svg]]

** Class Diagram
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
A simple class diagram

#+name: class-diagram
#+begin_src plantuml :exports code :results output silent
@startuml
class Car
Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns
@enduml
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src plantuml :noweb yes :file class-diagram.svg :output-dir images
<<class-diagram>>
#+end_src

#+RESULTS:
[[file:images/class-diagram.svg]]

* Tikz
** tikz diagram
*** code                                                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+name: tikz-triangle
#+begin_src latex :exports code
\begin{tikzpicture}
  \coordinate (A) at (0,0);
  \coordinate (B) at (60, 0);
  \coordinate (C) at (30, 30);
  \foreach \density in {20,30,...,80}{%
    \draw[fill=blue!\density]
    (A)--(B)--(C)--cycle;
    \path
    (A) coordinate (X)
    -- (B) coordinate[pos=.15](A)
    -- (C) coordinate[pos=.15](B)
    -- (X) coordinate[pos=.15](C);
  }
\end{tikzpicture}
#+end_src

*** output                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src latex :noweb yes :output-dir images :file triangle.svg :results file raw :exports results
<<tikz-triangle>>
#+end_src

#+RESULTS:
[[file:images/triangle.svg]]

* Org-babel Evaluating Programming Languages
** emacs lisp
#+begin_src emacs-lisp :exports both
(emacs-version)
#+end_src

#+RESULTS:
: GNU Emacs 28.0.50 (build 6, x86_64-w64-mingw32)
:  of 2021-08-31

** shell
#+begin_src shell :results verbatim :exports both
sh --version
#+end_src

#+RESULTS:
: GNU bash, version 5.1.8(1)-release (x86_64-pc-msys)
: Copyright (C) 2020 Free Software Foundation, Inc.
: License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
:
: This is free software; you are free to change and redistribute it.
: There is NO WARRANTY, to the extent permitted by law.

** C

#+begin_src C :exports both
printf("%s is %d years old\n", "C programming language", 2021-1972);
#+end_src

#+RESULTS:
: C programming language is 49 years old

** C++
#+begin_src C++ :exports both :namespaces std :includes <iostream>
cout << "C++ is " << 2021-1979 << " years old" << endl;
#+end_src

#+RESULTS:
: C++ is 42 years old

** Clojure
** ClojureScript
** Java
** Python

#+begin_src shell :exports both
python --version
#+end_src

#+RESULTS:
: Python 3.9.6

#+begin_src python :results output :exports both
print("Python in Emacs/orgmode")
#+end_src

#+RESULTS:
: Python in Emacs/orgmode

** Rust
#+begin_src shell
cargo install rust-script
#+end_src

#+begin_src emacs-lisp
(package-install 'ob-rust)
#+end_src

#+RESULTS:
: ‘ob-rust’ is already installed

#+begin_src rust :exports both
fn main() {
    println!("Rust in Emacs/orgmode");
}
#+end_src

** Go

#+begin_src go
package main
import ("fmt")

func main(){
   fmt.Println("emacs")
}
#+end_src

** R
* Conclusion
** Key Takeaways

- Emacs is a long lasting, and wonderful text editor
- Orgmode is an awesome plain text format
- \LaTeX{} and Beamer is great typesetting tool
- Thus, drawing plantuml diagram with these tools is cool!

* Appendix                                                       :B_appendix:
:PROPERTIES:
:BEAMER_env: appendix
:END:
** References
:PROPERTIES:
:BEAMER_opt: allowframebreaks,label=
:END:
#+BEGIN_EXPORT latex
\iffalse % multiline comment
#+END_EXPORT
[[bibliography:references.bib]]
#+BEGIN_EXPORT latex
\fi
\printbibliography
#+END_EXPORT

* Footnotes

[fn:1] https://www.gnu.org/software/emacs

[fn:2] https://orgmode.org

[fn:3] https://plantuml.com

[fn:4] http://tug.org/texlive

[fn:5] https://github.com/kimim/beamertheme-kimim

[fn:6] https://inkscape.org
